#!/usr/bin/perl
#############################################################################################
# Monitor for new inbound GPS data files from Permanent GNSS Stations.
# When a new file arrived, move it to $SAVEDIR and unpack it to $WORKDIR.
# Files are renamed to RINEXv3 standard naming during unpack.
#
# Soren Juul Moller, Dec 2019

use strict;
use warnings;
use threads;
use Thread::Queue;
use Archive::Zip qw(:ERROR_CODES :CONSTANTS);
use BaseConfig;
use Logger;
use Utils;
use Job;

my $Debug = 0;

my $UQ = Thread::Queue->new;	# Unpack queue
my $PQ = Thread::Queue->new;	# Pending queue


##########################################################################################
# Extract date and time from a filename
# Returns a hash reference with info or undef if not recognized.
#
sub parseFilename($) {
  my $fn = shift;
  my ($site, $site4, $year, $yy, $doy, $mm, $dd, $hour, $hh, $mi, $ftyp, $period);
  study($fn);

  # Septentrio: sssssssss_R_yyyydddhhmi_##H_##S_MO.rnx
  #             sssssssss_R_yyyydddhhmi_##H_xN.rnx
  if ($fn =~ /^([A-Z0-9]{9})_R_([0-9]{4})([0-9]{3})([0-9]{2})([0-9]{2})_[0-9]{2}(H|D)/i) {
    ($site, $year, $yy, $doy, $hh, $hour, $mi, $period) = (uc($1), int($2), year2sy($2), int($3), int($4), hour2letter($4), int($5), $6);
    $hour = '0' if $period eq 'D';
    $ftyp = 'septentrio-rnx3';
    ($year, $mm, $dd) = Doy_to_Date($year, $doy);
  }

  # Septentrio raw: ssssdddh.yy_
  elsif ($fn =~ /^([A-Z0-9]{4})([0-9]{3})([a-z])\.([0-9]{2})_/i) {
    ($site4, $doy, $hour, $hh, $yy, $year, $mi) = (uc($1), int($2), $3, letter2hour($3), int($4), sy2year($4), 0);
    $ftyp = 'septentrio-raw';
    ($year, $mm, $dd) = Doy_to_Date($year, $doy);
  }

  # Trinzic: ssssyyyymmddhhmiB.zip
  elsif ($fn =~ /^([a-z0-9]{4})([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})B\.zip$/i) {
    ($site4, $year, $yy, $mm, $dd, $hh, $hour, $mi) =
		(uc($1), int($2), year2sy($2), int($3), int($4), int($5), hour2letter($5), int($6));
    $ftyp = 'trinzic-zip';
    $yy = year2sy($year);
    $doy = Day_of_Year($year, $mm, $dd);
  }

  # Leica:   ssssdddh*.yyo.zip
  elsif ($fn =~ /^([a-zA-Z0-9]{4})([0-9]{3})([a-xA-X0])([0-9]+)?\.([0-9]{2})[a-z]\.zip$/i) {
    ($site4, $doy, $hour, $hh, $yy, $year) = (uc($1), int($2), $3, letter2hour($3), int($5), sy2year($5));
    $mi = (defined $4) ? int($4) : 0;
    $ftyp = 'leica-zip';
    ($year, $mm, $dd) = Doy_to_Date($year, $doy);
  }

  return undef if !defined $site && !defined $site4;
  if (defined $site) {
    $site4 = substr($site, 0, 4);
  } else {
    $site = $site4.'00DNK';	# best guess
  }

  return { site => $site, site4 => $site4, year => $year, doy => $doy, yy => $yy, mm => $mm, dd => $dd,
           hour => $hour, hh => $hh, mi => $mi, ftyp => $ftyp };
}

#############################################################################################
# Move all files in $src dir to $dst dir and remove $src dir
#
sub moveall($$) {
  my ($src,$dst) = @_;

  opendir(my $dh, $src) || return;
  my @files = grep(!/^\./, readdir($dh));
  closedir($dh);
  foreach my $f (@files) {
    my $s = "$src/$f";
    my $d = "$dst/$f";
    unlink($d);
    rename($s, $d)
  }
  rmdir($src);
}

#############################################################################################
#############################################################################################
# Pending thread
#
# This thread gather files to be submitted later. The file is added to its RinexSet
# object, and when no files has been added the last 20s and no active uploads in $INCOMING,
# then the job is submitted if state allows it.
# If a file arrives much later (after it has been processed), the RinexSet will be updated
# and the job will be resubmitted unless the dayjob has started.
# If the dayjob has started already, then the file will be ignored and the day needs to
# be manually reprocessed.
#

my %Pending;

sub submit_pending() {
  my @pending = keys %Pending;
  foreach my $ident (@pending) {
    my $rs = $Pending{$ident};
    my $age = time() - $rs->{'_timestamp'};
    if ($age > 3600) {
      delete $Pending{$ident};
    }
    elsif ($age > 19) {
      # Cannot submit if no obs file
      next if scalar(grep(/^MO\./, keys %$rs)) == 0;

      # check nothing is being transferred right now
      my $prefix = $rs->getFilenamePrefix();
      next if scalar(grep(/^$prefix/, dirlist($INCOMING))) > 0;

      my $workdir = $rs->getWorkdir();

      # Check if dayjob is active
      if ($rs->{'hour'} ne '0') {
        if (readfile("$workdir/state.0") =~ /^(queued|running)/) {
          logwarn("$ident: Cannot process. Dayjob already started. Ignoring. DOY reprocess needed.");
          delete $Pending{$ident};
          next;
        }
      }

      # Submit the job if not active
      my $job = new Job(rs => $rs);
      my $state = $job->lockstate()->readstate();
      if ($state =~ /^(none|processed)$/) {
        loginfo("Submitting $ident");
        delete $Pending{$ident};
        delete $rs->{'_timestamp'};
        moveall("$workdir/unpack.".$rs->{'hour'}, $workdir);
        $rs->store();
        $job->writestate('queued');
        $job->submitjob('ftp');
      } else {
        $rs->{'_timestamp'} = time();	# Job still active, postpone.
      }
      $job->unlockstate();
    }
  }
}

#
# Receive file belonging to a multi-file upload. The file is added to its RinexSet
# and the timestamp is updated.
# Loop ends when main threads sends the EXIT command.
#
sub pending_thread() {
  while (1) {
    submit_pending();
    my $parm = $PQ->dequeue_timed(5);
    next unless defined $parm && defined $parm->{'ident'};
    my $ident = $parm->{'ident'};
    last if $ident eq 'EXIT';

    my $fn = $parm->{'fn'};
    my $rs = $Pending{$ident};
    if (!defined $rs) {
      # Not in $Pending. Either new or late arrival.
      my ($site, $year, $doy, $hour) = split(/-/, $ident);
      $rs = new RinexSet(site => $site, year => $year, doy => $doy, hour => $hour);
      if (-f $rs->getRsFile()) {
        logwarn("$ident: $fn arrived late.");
        $rs->load();
      }
    }
 
    # Add this file
    if ($fn =~ /_([0-9]{2})S_MO\.rnx$/) {
      my $interval = int($1);
      $rs->{'MO.'.$interval} = $fn;
      $rs->{'interval'} = $interval;
    }
    elsif ($fn =~ /_([A-X]N)\.rnx$/) {
      $rs->{$1} = $fn;
    }

    $rs->{'_timestamp'} = time();
    $Pending{$ident} = $rs;
  }
  threads->detach;
}


#############################################################################################
#############################################################################################
# Unpack thread(s)
# The heavy lifting (decompressing) is done in multiple threads.
# If the file is part of a multi-file upload, send the file to pending_thread to be added
# to its RinexSet.
#

#################################
# Unzip $zipfile into $unpackdir using RINEXv3 filenames
#
sub unzip($$$) {
  my ($rs, $zipfile, $unpackdir) = @_;
  my %v3typemap = ( 'o' => 'MO', 'n' => 'GN', 'g' => 'RN', 'l' => 'EN', 'f' => 'CN', 'q' => 'JN' );

  my $zip = Archive::Zip->new;
  if ($zip->read($zipfile) != AZ_OK) {
    logwarn("unable to read zipfile $zipfile");
    return undef;
  }
  foreach my $zm ($zip->members()) {
    my $zmfn = $zm->fileName();
    my $ofn;
    unlink("$unpackdir/$zmfn");
    $zm->extractToFileNamed("$unpackdir/$zmfn");	# extract
    if ($zmfn =~ /\.(gz|Z)$/) {				# uncompress
      system('/usr/bin/gunzip', "$unpackdir/$zmfn");
      $zmfn =~ s/\.(gz|Z)$//;
    }
    if ($zmfn =~ /\.(\d\dd|crx)$/) {			# crx2rnx
      $ofn = $zmfn;
      $ofn =~ s/d$/o/;
      $ofn =~ s/\.crx$/.rnx/;
      system($CRX2RNX, "$unpackdir/$zmfn", "$unpackdir/$ofn");
      $zmfn = $ofn;
    }
    my $ftyp;
    if ($zmfn =~ /\.\d\d([onglfq])$/) {			# rename to v3 name
      $ftyp = $v3typemap{$1};
    } elsif ($zmfn =~ /_(MO|[A-Z]N)\.rnx$/) {
      $ftyp = $1;
    } else {
      logwarn($rs->getIdent().": unrecognized filetype $zmfn in $zipfile");
      unlink($zmfn);
      next;
    }
    $ftyp .= '.'.$rs->{'interval'} if $ftyp eq 'MO';
    $ofn = $rs->getRinexFilename($ftyp);
    if ($ofn ne $zmfn) {
      unlink("$unpackdir/$ofn");
      rename("$unpackdir/$zmfn", "$unpackdir/$ofn");
    }
    $rs->{$ftyp} = $ofn;
  }
  $rs->{zipfile} = $zipfile;
  return $rs;
}


#################################
# Unpack one file into its workdir.
#
sub unpack_file($) {
  my $parm = shift;
  my ($ifn, $site, $obsint) = ($parm->{'ifn'}, $parm->{'site'}, $parm->{'obsint'});
  my $fn = basename($ifn);

  my $ff = parseFilename($fn);
  if (!defined $ff) {
    logwarn("Cannot recognize file $fn");
    return;
  }

  my ($year, $doy, $hour) = ($ff->{'year'}, $ff->{'doy'}, $ff->{'hour'});

  my $job = new Job(site => $site, year => $year, doy => $doy, hour => $hour, interval => $obsint);
  my $workdir = $job->getWorkdir;
  my $ident = $job->getIdent();
  my $rs;

  my $unpackdir = "$workdir/unpack.$hour";
  mkdir($unpackdir) unless -d $unpackdir;

  # Multi file uploads go to the pending thread. State is handled there.

  if ($ff->{'ftyp'} eq 'septentrio-rnx3') {
    $fn =~ s/\.gz$//;
    my $dst = "$unpackdir/$fn";
    loginfo("gunzip $fn.gz") if !$Debug;
    sysrun([qw(/usr/bin/gzip -dc), $ifn], { stdout => $dst });
    $PQ->enqueue({ ident => $ident, fn => $fn });
    return;
  }

  # Single file uploads. Unpack and submit job directly.

  if ($ff->{'ftyp'} eq 'septentrio-raw') {
    $rs = new RinexSet(site => $site, year => $year, doy => $doy, hour => $hour, interval => $obsint, rawfile => $ifn);
    loginfo("Unpack Septentrio raw file $fn into $workdir");
    my $countrycode = substr($site, 6, 3);
    chdir("$unpackdir");
    sysrun([$SBF2RIN, '-f', $ifn, qw(-l -R3 -nOP -s -D -O), $countrycode], { stdout => "$workdir/sbf2rin.$hour.log", log => $Debug });
    #sysrun("$SBF2RIN -f $ifn -l -R3 -nOP -s -D -O $countrycode >$workdir/sbf2rin.$hour.log 2>&1", { log => $Debug });
    chdir($INCOMING);
    $rs->checkfiles($unpackdir);
  }

  elsif ($ff->{'ftyp'} eq 'trinzic-zip') {
    $rs = new RinexSet(site => $site, year => $year, doy => $doy, hour => $hour, interval => $obsint, zipfile => $ifn);
    loginfo("Unzipping $fn to $workdir");
    unzip($rs, $ifn, $unpackdir);
  }

  elsif ($ff->{'ftyp'} eq 'leica-zip') {
    if ($ff->{'mi'} != 0) {
      # TODO: merge split hour into exiting hour
      logwarn("Split hours not supported yet.");
      return;
    }
    $rs = new RinexSet(site => $site, year => $year, doy => $doy, hour => $hour, interval => $obsint, zipfile => $ifn);
    loginfo("Unzipping $fn to $workdir");
    unzip($rs, $ifn, $unpackdir);
  }

  if (defined $rs) {
    # Check if dayjob has started
    if ($rs->{'hour'} ne '0') {
      if (readfile("$workdir/state.0") =~ /^(queued|running)/) {
        logwarn("$ident: Cannot process. Dayjob already started. Ignoring.");
        return;
      }
    }

    # Move files un unpack.$h to $workdir. If job is active, send files to pending thread.
    my $state = $job->lockstate()->readstate();
    if ($state =~ /^(none|processed)$/) {
      moveall($unpackdir, $workdir);
      $job->writestate('queued');
      $rs->store();
      $job->{'rsfile'} = $rs->getRsFile;
      $job->submitjob('ftp');
    } else {
      $PQ->enqueue({ ident => $ident, fn => $_ }) foreach grep(/^(MO\.[0-9]+|[A-X]N)$/, keys %$rs);
    }
  } else {
    $job->writestate('none');
    logerror("Unknown filetype: $ff->{'ftyp'}");
  }
  $job->unlockstate();
}

#
# Receive files to unpack from main thread. Loop ends when main thread calls $UQ->end()
# There will be Nthreads number of instances of this function.
#
sub unpack_thread() {
  while (my $parm = $UQ->dequeue()) {
    eval {
      unpack_file($parm);
      1;
    } || do {
      logerror("FATAL ERROR: ".longmess($parm->{'site'}.'-'.$parm->{'year'}.'-'.$parm->{'doy'}.'-'.$parm->{'hour'}));
    }
  }
  threads->detach;
}


#############################################################################################
#############################################################################################
# Main thread
# THe main thread monitors $INCOMING for new files.
# Check if site is know, move it away from $INCOMING, and send message to a unpack_thread
# to do the unpacking into $WORKDIR.
#
# IMPORTANT: All database (DBI) operations MUST be in the main thread. DBI is not thread safe.
#

use Linux::Inotify2;
use GPSDB;
use Getopt::Std;

my %SCS;
my $DB;

#
# Lookup site in gpssums. Returns true if current year-doy exists, false if not.
#
sub dailysum_exists($$$) {
  my ($site, $year, $doy) = @_;

  my $href = $DB->{'DBH'}->selectrow_hashref(q{
	select count(site) cnt
	from gpssums
	where site = ? and year = ? and doy = ? and hour = '0'
  }, undef, $site, $year, $doy);
  if (defined $href && $href->{'cnt'}) {
    logerror("$site-$year-$doy already processed. Forget DOY $site-$year-$doy first.");
    return 1;
  }
  return 0;
}


#
# Load all sites from locations table into %SCS
#
sub load_sites() {
  # Get the complete list of defined sites from DB
  # We only use the short version of sitename here.
  my $dbh = $DB->{'DBH'};
  my $aref = $dbh->selectall_arrayref(q{
	select	site, shortname, obsint
	from	locations
  }, { Slice => {} });
  die("No sites defined!?") if !defined $aref || scalar(@$aref) == 0;
  %SCS = map { $_->{'shortname'} => $_ } @$aref;
}


#
# Handle one file in $INCOMING
# Move to $SAVEDIR, create $workdir and send to unpack threads
#
sub handle_inbound($) {
  my $ifn = shift;

  my $fn = basename($ifn);
  my $ff = parseFilename($fn);
  if (!defined $ff || !defined $ff->{'site4'}) {
    logwarn("$fn not recorgnized. Moved to stale.");
    sysmv($ifn, $SAVEDIR.'/stale', { log => $Debug, mkdir => 1 });
    return;
  }

  # Make sure we know the site
  my $sc = $SCS{$ff->{'site4'}};
  if (!defined $sc) {
    logwarn('No such site: '.$ff->{'site4'}.'. Moved to stale.');
    sysmv($ifn, $SAVEDIR.'/stale', { log => $Debug, mkdir => 1 });
    return;
  }

  # From hereon use the 9-ch site name.
  my ($site, $year, $doy) = ($sc->{'site'}, $ff->{'year'}, $ff->{'doy'});
  my $savedir = sprintf("%s/%s/%4d/%03d", $SAVEDIR, $site, $year, $doy);
  sysmv($ifn, $savedir, { log => $Debug, mkdir => 1 });

  my $job = new Job(site => $site, year => $year, doy => $doy, hour => $ff->{'hour'}, interval => $sc->{'obsint'});
  my $workdir = $job->getWorkdir();
  if (! -d $workdir) {
    return if dailysum_exists($site, $year, $doy);
    $job->mkWorkdir();
  }
  $UQ->enqueue({ ifn => "$savedir/$fn", site => $site, obsint => $sc->{'obsint'} });
}


#
# scan_incoming will add all plain files in $INCOMING to %Inbound
#
sub scan_incoming() {
  my $fd;
  open($fd, '-|', qq(/bin/find $INCOMING -type f -print));
  while (<$fd>) {
    chomp;
    handle_inbound($_) if fileage($_) > 20;
  }
  close($fd);
}

# Below the actual main

setprogram(basename($0));
$0 = basename($0)." ".join(' ',@ARGV);

my %opts = ();
getopts('c:di:l:', \%opts);

BaseConfig::init($opts{'c'}) if defined $opts{'c'};

$Debug = 1 if defined $opts{'d'};
logchannel($opts{'l'}) if defined $opts{'l'};
my $Nthreads = (defined $opts{'i'} ? $opts{'i'} : $JOBINSTANCES);

chdir($INCOMING);
select(STDERR); $| = 1;
select(STDOUT); $| = 1;

# start threads
threads->create('unpack_thread') for (1..$Nthreads);
threads->create('pending_thread');

my $inotify = new Linux::Inotify2
	|| errdie("$0: unable to create new inotify object: $!");
$inotify->blocking(0);
$inotify->watch($INCOMING, IN_MOVED_TO | IN_CLOSE_WRITE);

$DB = new GPSDB;	# GPSDB must be instantiated after thread creations
load_sites();

loginfo("$0 started. threads=$Nthreads, Debug=$Debug");

scan_incoming();

my $signal_received = '';
local $SIG{INT} = sub { $signal_received = 'interrupted' };
local $SIG{TERM} = sub { $signal_received = 'terminated' };
local $SIG{HUP} = sub { $signal_received = 'SIGHUP' };

# %inbound is used for delaying the processing of an inbound file by at least 1s.
# This because uploaders may want to set attributes after file has been uploaded,
# and if move straigt away, this will fail. It also ensures that inbound filenames
# are unique (filter out multiple events for the same file).

my %inbound;

my $ntimeouts = 0;
while (!$signal_received) {
  my @q = sort { $inbound{$a} - $inbound{$b} } keys %inbound;
  foreach (@q) {
    if (time() - $inbound{$_} > 1) {
      handle_inbound($_);
      delete $inbound{$_};
    }
  }

  my $v = '';
  vec($v, $inotify->fileno, 1) = 1;
  select($v, undef, undef, 1);			# wait 1s for inotify has something
  if (vec($v, $inotify->fileno, 1)) {
    $ntimeouts = 0;
    my @events = $inotify->read;
    $inbound{$_->fullname} = time() foreach @events;
  } elsif (scalar(keys %inbound) == 0) {
    $ntimeouts++;
    if ($signal_received eq 'SIGHUP' || $ntimeouts % 600 == 0) {
      load_sites();
      scan_incoming();
    }
  }
  $signal_received = '' if $signal_received eq 'SIGHUP';
}

# shutdown threads
$PQ->enqueue({ ident => 'EXIT' });
$UQ->end();

my $nwaits = 0;
sleep 1 while ($nwaits++ < 25 && threads->list(threads::running));	# wait for threads to terminate

loginfo("$0 stopped");
logclose();
exit(0);
