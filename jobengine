#!/usr/bin/perl
#
# Simple job scheduler.
# Monitor $JOBQUEUE for new job files. Each jobfile spawns a process that runs
# Job->process(). The scheduler defaults to 4 concurrent processes.
#
# Soren Juul Moller, Nov 2019

use strict;
use warnings;
use Getopt::Std;
use Carp qw(longmess);
use Parallel::ForkManager;
use Linux::Inotify2;
use BaseConfig;
use Utils;
use Logger;
use RinexSet;
use Job;

my %Pending;
my %Running;
my $Debug = 1;  	# set with -d option
my $FM;			# FormManager


#####################################
# Submit a dayjob on an incomplete day
#
sub force_completion($$$) {
  my ($site, $year, $doy) = @_;

  loginfo("Force completion of $site-$year-$doy");
  my $dayjob = new Job(site => $site, year => $year, doy => $doy);
  my $workdir = $dayjob->getWorkdir;

  # Find interval
  my $interval;
  foreach my $hour ('a'..'x') {
    next unless -f "$workdir/rs.$hour.json";
    my $rs = new RinexSet(rsfile => "$workdir/rs.$hour.json");
    $interval = $rs->{'interval'};
    last if defined $interval;
  }

  # Submit dayjob
  if (defined $interval) {
    ($dayjob->{'hour'}, $dayjob->{'interval'}, $dayjob->{'incomplete'}) = ('0', $interval, 1);
    $dayjob->submitjob('hour2daily');
    writefile("$workdir/status.0", "queued");
  } else {
    logerror("6:Cannot force completion of $site-$year-$doy. No proccessed hours.");
  }
}


#####################################
# Look for forced incomplete days and submit them
#
sub scan_for_forced_incompletes() {
  sub dirscan($) {
    my $dir = shift;
    opendir(my $dh, $dir);
    my @dirs = grep { index($_,'.') != 0 && -d "$dir/$_" } readdir($dh);
    closedir($dh);
    return @dirs;
  }
  foreach my $site (dirscan($WORKDIR)) {
    foreach my $year (dirscan("$WORKDIR/$site")) {
      foreach my $doy (dirscan("$WORKDIR/$site/$year")) {
        my $w = "$WORKDIR/$site/$year/$doy";
        next unless -f "$w/force-complete";
        unlink("$w/force-complete");
        force_completion($site, $year, $doy);
      }
    }
  }
}


#####################################
# Run command issued by someone like admin.cgi
#
sub runcommand($) {
  my $file = shift;
  open(my $fd, '<', $file);
  my $cmd = <$fd>; chomp;
  close($fd);

  if ($cmd =~ /^reload ftpuploader/) {
    sysrun("systemctl reload ftpuploader");
  }
  elsif ($cmd =~ /^force complete (\w+) (\d+) (\d+)/) {
    force_completion($1, $2, $3);
  }
}


#####################################
# Spawn a job using ForkManager
#
sub runjob($) {
  my $jobfile = shift;

  return unless -f $jobfile;

  # If filename ends with 'command', then assume it is a command file
  if ($jobfile =~ /command$/) {
    # message from admin.cgi
    runcommand($jobfile);
    unlink($jobfile);
    return;
  }

  # otherwise assume it's a JSON file
  my $job = new Job(jobfile => $jobfile);
  unlink($jobfile);

  unless (defined $job && $job->verifyobj()) {
    logerror("invalid jobfile $jobfile");
    return;
  }

  # Duplicate event check
  my $ident = $job->getIdent;
  if (exists $Running{$ident}) {
    logerror("Duplicate job $ident");
    return;
  }

  my $workdir = $job->getWorkdir;
  my $statusfile = "$workdir/status.".$job->{'hour'};
  if (-f $statusfile && readfile($statusfile) =~ /^running/) {
    logerror("Duplicate job");
    return;
  }
  writefile($statusfile, "running");

  loginfo("Run $ident");
  $Running{$ident} = $job;		# need this in onfinish()
  $FM->start($ident) && return;  	# start instance
  setprogram("job");
  chdir($workdir);
  eval {
    $job->process(); 1;
  } || do {
    logerror("FATAL ERROR: $@\n".longmess());	# Serious program error occurred.
  };
  $FM->finish(0);			# exit this instance
}


##########################################
# Callback called when a child finishes
# Might be delayed since it called upon process being reaped.
#
sub onfinish() {
  my ($pid, $exitcode, $ident) = @_;
  delete $Running{$ident};
}


#####################################
# Inotify2 callback
# Called for each new file arrived in queue
#
sub inotify_callback() {
  my $event = shift;
  alarm 0;
  runjob($event->fullname);
}


########################################################################################################
# Main program
#
my %opts = ();
getopts('c:di:l:', \%opts);

BaseConfig::init($opts{'c'}) if defined $opts{'c'};

my $log = (defined $opts{'l'} ? $opts{'l'} : "/dev/null");
$Debug = 1 if defined $opts{'d'};

my $Ninstances = (defined $opts{'i'} ? $opts{'i'} : $JOBINSTANCES);

setprogram($0);
$0 = basename($0)." ".join(' ',@ARGV);

select(STDERR); $| = 1;         # Unbuffered output
select(STDOUT); $| = 1;         # Unbuffered output

# Initialize ForkManager
$FM = new Parallel::ForkManager($Ninstances);
$FM->run_on_finish(\&onfinish);

loginfo("jobengine started with $Ninstances instances");

# Run jobs in queue already
runjob("$JOBQUEUE/$_") foreach dirlist($JOBQUEUE);

# Setup queue event handler
my $inotify = new Linux::Inotify2;
$inotify->blocking(0);
my $watcher = $inotify->watch($JOBQUEUE, IN_MOVED_TO | IN_CLOSE_WRITE, \&inotify_callback);

# main loop
my $signal_received = '';
$SIG{INT} = sub { $signal_received = 'interrupt' };
$SIG{TERM} = sub { $signal_received = 'terminated' };
$SIG{HUP} = sub { $signal_received = 'SIGHUP' };

my $ntimeouts = 0;
while (1) {
  my $v = '';
  vec($v, $inotify->fileno, 1) = 1;
  select($v, undef, undef, 1);		# wait 1s for inotify has something
  if (vec($v, $inotify->fileno, 1)) {
    $ntimeouts = 0;
    $inotify->poll;
  } else {
    last if $signal_received && $signal_received ne 'SIGHUP';
    $ntimeouts++;
    if ($ntimeouts % 7 == 0) {
      # ForkManager needs reaping of finished childs to force callback
      $FM->reap_finished_children if $FM->running_procs > 0;
    }
  }
}
loginfo($signal_received) if $signal_received;

$watcher->cancel;
$FM->wait_all_children;

loginfo("$0 stopped");
logclose();
exit(0);
